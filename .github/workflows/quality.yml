# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ['main']
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'go.mod'
  pull_request:
    branches: ['main']
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'go.mod'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  golangci-lint:
    name: Code-Quality / GolangCI-Lint
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (!github.event.pull_request.draft && !contains(github.event.pull_request.title, 'WIP'))
    strategy:
      matrix:
        go: ['1.24','1.25']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --timeout=5m
          version: v2.4
  unit-test:
    name: Code-Quality / Unit-Test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (!github.event.pull_request.draft && !contains(github.event.pull_request.title, 'WIP'))
    strategy:
      matrix:
        go: ['1.24','1.25']
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: UnitTest
        run: |
          set -e
          make test

      - name: Build Test
        run: make docker-build

  deploy-to-test-env:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [unit-test, golangci-lint]
    if: github.event_name != 'pull_request' || (!github.event.pull_request.draft && !contains(github.event.pull_request.title, 'WIP'))
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5

      - name: Build Docker Image
        run: |
          set -e
          go mod download # todo: add cache for optimization
          make docker-build

      - name: Tag Docker Image
        run: |
          IMAGE=ghcr.io/togetherforstudy/jxust-yqlx-server:backend_${{ github.event.number }}_$(openssl rand -hex 3)
          docker tag gojxust-app:nightly $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "Docker Image: $IMAGE"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          set -e
          docker push ${{ env.IMAGE }}

      - name: Prepare and send deployment config
        run: |
          set -e
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.YQLX_DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.YQLX_DEPLOY_SERVER_IP }}" >> ~/.ssh/known_hosts
          
          # Modify config and pipe to remote script
          sed -e "s|  image: .*|  image: ${{ env.IMAGE }}|" \
              -e "/backend:/,/frontend:/s/  branch: main/  branch: $BRANCH_NAME/" \
              ci-test-opt.yml.example | ssh root@${{ secrets.YQLX_DEPLOY_SERVER_IP }} 'python3 /opt/deploy/gateway.py test-deploy'
